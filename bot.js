const { Telegraf, Markup } = require('telegraf');

// API-—Ç–æ–∫–µ–Ω –±–æ—Ç–∞
const BOT_TOKEN = '7646237377:AAH30i_qcrd0ILAD5mJUvXYWjg_w0FLU8Uo';
const bot = new Telegraf(BOT_TOKEN);

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
const state = {
  sentMessages: [], // –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–æ–≤
  surpriseHistory: [], // –ò—Å—Ç–æ—Ä–∏—è —Å—é—Ä–ø—Ä–∏–∑–æ–≤
};

// –ö–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã –¥–ª—è –í–∞–ª–µ—Ä–∏–∏ (—Ä—É—Å—Å–∫–∏–π –∏ –∞—Ä–º—è–Ω—Å–∫–∏–π)
const compliments = [
  '–í–∞–ª–µ—Ä–∏—è –î–∂–∞–Ω, —Ç–≤–æ—è —É–ª—ã–±–∫–∞ ‚Äî –º–æ–π —Å–≤–µ—Ç –≤ –∞—Ä–º–∏–∏. üòä',
  '–ú–æ—è –ª—é–±–æ–≤—å, —Ç—ã –¥–µ–ª–∞–µ—à—å –∫–∞–∂–¥—ã–π –º–æ–π –¥–µ–Ω—å –æ—Å–æ–±–µ–Ω–Ω—ã–º. ‚ù§Ô∏è',
  '–í–∞–ª–µ—Ä–∏—è, —Ç—ã ‚Äî –º–æ—è –∑–≤–µ–∑–¥–∞, —Å–∏—è—é—â–∞—è –Ω–∞–¥ –ï—Ä–µ–≤–∞–Ω–æ–º. üåü',
  '–†–æ–¥–Ω–∞—è, —Ç–≤–æ—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ ‚Äî –º–æ—è —Å–∏–ª–∞. –ñ–¥–∏ –º–µ–Ω—è! üí™',
  '–í–∞–ª–µ—Ä–∏—è –î–∂–∞–Ω, —Ç—ã ‚Äî –º–æ—è –º–µ—á—Ç–∞, —Ä–∞–¥–∏ –∫–æ—Ç–æ—Ä–æ–π —è —Å–ª—É–∂—É. ‚ú®',
  '–ú–æ—è –∫–æ—Ä–æ–ª–µ–≤–∞, –Ω–∞—à–∞ –ª—é–±–æ–≤—å —Å–∏–ª—å–Ω–µ–µ –≤—Ä–µ–º–µ–Ω–∏. üëë',
  '–í–∞–ª–µ—Ä–∏—è, —Ç—ã ‚Äî –º–æ–π –º–∞—è–∫, –≤–µ–¥—É—â–∏–π –º–µ–Ω—è –¥–æ–º–æ–π. üåÖ',
  '–õ—é–±–∏–º–∞—è, —è —Å—á–∏—Ç–∞—é —Å–µ–∫—É–Ω–¥—ã –¥–æ –Ω–∞—à–µ–π –≤—Å—Ç—Ä–µ—á–∏. üíñ',
  '–í–∞–ª–µ—Ä–∏—è –î–∂–∞–Ω, —Ç—ã ‚Äî –º–æ—ë —Å–µ—Ä–¥—Ü–µ, –±—å—é—â–µ–µ—Å—è –≤ –ï—Ä–µ–≤–∞–Ω–µ. üíû',
  '–ú–æ—è –¥—É—à–∞, —Ç—ã –¥–µ–ª–∞–µ—à—å –º–æ—é —Å–ª—É–∂–±—É –ª–µ–≥—á–µ. üòò',
  '’é’°’¨’•÷Ä’´’° ’ã’°’∂, ÷Ñ’∏ ’™’∫’´’ø’∂ ’´’¥ ’¨’∏÷Ç’µ’Ω’∂ ’ß ’¢’°’∂’°’Ø’∏÷Ç’¥÷â üòä',
  '‘ª’¥ ’Ω’•÷Ä, ’§’∏÷Ç ’°’¥’•’∂ ÷Ö÷Ä’Ω ’§’°÷Ä’±’∂’∏÷Ç’¥ ’•’Ω ’∞’°’ø’∏÷Ç’Ø÷â ‚ù§Ô∏è',
  '’é’°’¨’•÷Ä’´’°, ’§’∏÷Ç ‘µ÷Ä÷á’°’∂’´ ’•÷Ä’Ø’∂÷Ñ’∏÷Ç’¥ ’´’¥ ’°’Ω’ø’≤’∂ ’•’Ω÷â üåü',
  '’Ä’°÷Ä’°’¶’°’ø’Ω, ÷Ñ’∏ ’°’ª’°’Ø÷Å’∏÷Ç’©’µ’∏÷Ç’∂’∂ ’´’¥ ’∏÷Ç’™’∂ ’ß÷â üí™',
  '’é’°’¨’•÷Ä’´’° ’ã’°’∂, ’§’∏÷Ç ’•÷Ä’°’¶’°’∂÷Ñ’Ω ’•’Ω, ’∏÷Ä’´ ’∞’°’¥’°÷Ä ’Æ’°’º’°’µ’∏÷Ç’¥ ’•’¥÷â ‚ú®'
];

// –°—é—Ä–ø—Ä–∏–∑—ã –æ—Ç –†–æ–º–∞
const surprises = [
  'üéâ –ü—Ä–æ–≥—É–ª–∫–∞ –ø–æ –ö–∞—Å–∫–∞–¥—É –≤ –ï—Ä–µ–≤–∞–Ω–µ –ø–æ—Å–ª–µ –º–æ–µ–π —Å–ª—É–∂–±—ã ‚Äî –∫–∞–∫ —Ç–µ–±–µ –∏–¥–µ—è, –î–∂–∞–Ω? üåÜ',
  'üíå –ù–∞–ø–∏—à–∏ –º–Ω–µ –ø–∏—Å—å–º–æ, —è –ø—Ä–æ—á—Ç—É –µ–≥–æ –≤ –æ—Ç–ø—É—Å–∫–µ! –ê–¥—Ä–µ—Å: —Å–µ—Ä–¥—Ü–µ –í–∞–ª–µ—Ä–∏–∏. üòò',
  'üåÖ –°—Ñ–æ—Ç–∫–∞–π –∑–∞–∫–∞—Ç —Å–µ–≥–æ–¥–Ω—è –∏ –ø–æ–¥—É–º–∞–π –æ–±–æ –º–Ω–µ, –º–æ—è –ª—é–±–æ–≤—å. üì∏',
  'üç∑ –î–∞–≤–∞–π —É—Å—Ç—Ä–æ–∏–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —É–∂–∏–Ω? –ó–∞–∂–≥–∏ —Å–≤–µ—á—É –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤—å –º–µ–Ω—è —Ä—è–¥–æ–º. üïØÔ∏è',
  'üé∂ –ü–æ—Å–ª—É—à–∞–π –Ω–∞—à—É –ª—é–±–∏–º—É—é –ø–µ—Å–Ω—é –∏ —É–ª—ã–±–Ω–∏—Å—å ‚Äî —è –¥—É–º–∞—é –æ —Ç–µ–±–µ! üéµ',
  'üåπ –ó–∞–≥–∞–¥–∞–π –∂–µ–ª–∞–Ω–∏–µ –ø–æ–¥ –∑–≤—ë–∑–¥–∞–º–∏ –ï—Ä–µ–≤–∞–Ω–∞ ‚Äî —è –∏—Å–ø–æ–ª–Ω—é –µ–≥–æ, –∫–æ–≥–¥–∞ –≤–µ—Ä–Ω—É—Å—å! ‚ú®',
  'üíï –°–ø–ª–∞–Ω–∏—Ä—É–π –Ω–∞—à–µ –ø–µ—Ä–≤–æ–µ —Å–≤–∏–¥–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∞—Ä–º–∏–∏ ‚Äî —è –≤–µ—Å—å –≤ –ø—Ä–µ–¥–≤–∫—É—à–µ–Ω–∏–∏! üòä',
  'üñºÔ∏è –ù–∞—Ä–∏—Å—É–π —á—Ç–æ-–Ω–∏–±—É–¥—å –¥–ª—è –º–µ–Ω—è ‚Äî —è –ø–æ–≤–µ—à—É —ç—Ç–æ –≤ —Å–≤–æ–µ–π –º–µ—á—Ç–µ –æ —Ç–µ–±–µ! ‚úçÔ∏è',
  'üç´ –ö—É–ø–∏ —Å–µ–±–µ –ª—é–±–∏–º–æ–µ –ª–∞–∫–æ–º—Å—Ç–≤–æ –∏ —Å–∫–∞–∂–∏: ¬´–≠—Ç–æ –æ—Ç –†–æ–º–∞!¬ª üòã',
  'üíû –ü—Ä–µ–¥—Å—Ç–∞–≤—å, –∫–∞–∫ —è –æ–±–Ω–∏–º–∞—é —Ç–µ–±—è –∫—Ä–µ–ø–∫–æ-–∫—Ä–µ–ø–∫–æ ‚Äî —Å–∫–æ—Ä–æ —ç—Ç–æ —Å—Ç–∞–Ω–µ—Ç —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é! ü§ó'
];

// –°–ª—É—á–∞–π–Ω—ã–µ —ç–º–æ–¥–∑–∏
const randomEmojis = ['‚ù§Ô∏è', 'üíñ', 'üåü', 'üòò', 'üåπ', 'üí™', 'üòä', '‚ú®', 'üíû', '‚òÄÔ∏è'];

// ASCII-–∞—Ä—Ç
const getAsciiArt = (isNight) => {
  return isNight
    ? `
    üåôüåô
   ‚ú®  
  üíñüíñ
   ‚ú®  
    üåôüåô
    `
    : `
    ‚òÄÔ∏è‚òÄÔ∏è
   ‚ù§Ô∏è  
üíûüíñüíñ
   ‚ù§Ô∏è  
    ‚òÄÔ∏è‚òÄÔ∏è
    `;
};

// –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å—á—ë—Ç–∞ —Å–ª—É–∂–±—ã (–ï—Ä–µ–≤–∞–Ω, UTC+4)
function getService() {
  const yerevanOffset = 4 * 60 * 60 * 1000; // UTC+4
  const startDate = new Date('2025-06-09T00:00:00Z'); // –ù–∞—á–∞–ª–æ: 9 –∏—é–Ω—è 2025
  const endDate = new Date('2026-07-09T00:00:00Z'); // –ö–æ–Ω–µ—Ü: 9 –∏—é–ª—è 2026
  const currentDate = new Date(Date.now() + yerevanOffset);

  const msPerDay = 24 * 60 * 60 * 1000;
  const msPerHour = 60 * 60 * 1000;
  const msPerMinute = 60 * 1000;
  const msPerSecond = 1000;

  const msPassed = currentDate - startDate;
  const msLeft = endDate - currentDate;
  const msTotal = endDate - startDate;

  const daysPassed = Math.floor(msPassed / msPerDay);
  const hoursPassed = Math.floor((msPassed % msPerDay) / msPerHour);
  const minutesPassed = Math.floor((msPassed % msPerHour) / msPerMinute);
  const secondsPassed = Math.floor((msPassed % msPerMinute) / msPerSecond);

  const daysLeft = Math.floor(msLeft / msPerDay);
  const hoursLeft = Math.floor((msLeft % msPerDay) / msPerHour);
  const minutesLeft = Math.floor((msLeft % msPerHour) / msPerMinute);
  const secondsLeft = Math.floor((msLeft % msPerMinute) / msPerSecond);

  const totalDays = Math.floor(msTotal / msPerDay);
  const progressPercent = ((daysPassed / totalDays) * 100).toFixed(2);

  // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
  const barLength = 30;
  const filled = Math.round((progressPercent / 100) * barLength);
  const progressBar = 'üü•'.repeat(filled) + '‚¨ú'.repeat(barLength - filled);

  // ASCII-–∞—Ä—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
  const hours = currentDate.getHours();
  const isNight = hours >= 18 || hours < 6;

  // –°–ª—É—á–∞–π–Ω—ã–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç
  let compliment;
  do {
    compliment = compliments[Math.floor(Math.random() * compliments.length)];
  } while (state.sentMessages.includes(compliment) && state.sentMessages.length < compliments.length);
  state.sentMessages.push(compliment);
  if (state.sentMessages.length >= compliments.length) state.sentMessages.shift();

  const emoji = randomEmojis[Math.floor(Math.random() * randomEmojis.length)];

  if (currentDate < startDate) {
    return `${getAsciiArt(isNight)}\n<b>–í–∞–ª–µ—Ä–∏—è –î–∂–∞–Ω, –†–æ–º–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª —Å–ª—É–∂–±—É.</b> ü™ñ\n–î–æ –Ω–∞—á–∞–ª–∞ (${startDate.toLocaleDateString('ru-RU')}): ${-daysLeft} –¥–Ω–µ–π, ${-hoursLeft} —á–∞—Å–æ–≤, ${-minutesLeft} –º–∏–Ω—É—Ç, ${-secondsLeft} —Å–µ–∫—É–Ω–¥\n–†–æ–º–∞ —Å–∫—É—á–∞–µ—Ç –ø–æ —Ç–µ–±–µ, –º–æ—è –ª—é–±–æ–≤—å! ${emoji}`;
  } else if (currentDate > endDate) {
    return `${getAsciiArt(isNight)}\n<b>–í–∞–ª–µ—Ä–∏—è –î–∂–∞–Ω, –†–æ–º–∞ –≤–µ—Ä–Ω—É–ª—Å—è!</b> ü™ñüéñÔ∏è\n–°–ª—É–∂–±–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, –±–µ–≥–∏ –æ–±–Ω–∏–º–∞—Ç—å –†–æ–º—É! üòò ${emoji}`;
  } else {
    return `${getAsciiArt(isNight)}\n<b>–í–∞–ª–µ—Ä–∏—è –î–∂–∞–Ω, –≤–æ—Ç —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –∂–¥–∞—Ç—å –†–æ–º—É!</b> ü™ñ\n\n` +
           `üü• –ü—Ä–æ—à–ª–æ: ${daysPassed} –¥–Ω–µ–π, ${hoursPassed} —á–∞—Å–æ–≤, ${minutesPassed} –º–∏–Ω—É—Ç, ${secondsPassed} —Å–µ–∫—É–Ω–¥\n` +
           `‚¨ú –û—Å—Ç–∞–ª–æ—Å—å: ${daysLeft} –¥–Ω–µ–π, ${hoursLeft} —á–∞—Å–æ–≤, ${minutesLeft} –º–∏–Ω—É—Ç, ${secondsLeft} —Å–µ–∫—É–Ω–¥\n` +
           `–í—Å–µ–≥–æ: ${totalDays} –¥–Ω–µ–π\n` +
           `<b>–ü—Ä–æ–≥—Ä–µ—Å—Å: ${progressPercent}%</b>\n${progressBar}\n\n` +
           `<b>–†–æ–º–∞ –≥–æ–≤–æ—Ä–∏—Ç —Ç–µ–±–µ:</b> ${compliment} ${emoji}`;
  }
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
const keyboard = Markup.keyboard([
  ['ü™ñ –°–∫–æ–ª—å–∫–æ –∂–¥–∞—Ç—å –†–æ–º—É?', 'üéÅ –°—é—Ä–ø—Ä–∏–∑ –æ—Ç –†–æ–º–∞'],
  ['üá¶üá≤ ’Ä’°’µ’•÷Ä’•’∂']
]).resize();

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command('start', (ctx) => {
  try {
    console.log(`–ß–∞—Ç ID: ${ctx.chat.id}`);
    const asciiArt = getAsciiArt(false);
    ctx.reply(
      `${asciiArt}\n<b>–í–∞–ª–µ—Ä–∏—è –î–∂–∞–Ω, –ø—Ä–∏–≤–µ—Ç!</b> üòò\n–Ø –±–æ—Ç @RomaARMY, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –†–æ–º–æ–π, —á—Ç–æ–±—ã —Ç—ã –∑–Ω–∞–ª–∞, —Å–∫–æ–ª—å–∫–æ –∂–¥–∞—Ç—å –µ–≥–æ –∏–∑ –∞—Ä–º–∏–∏. ü™ñ\n–û–Ω –¥—É–º–∞–µ—Ç –æ —Ç–µ–±–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É. üíï\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ! üëá`,
      { parse_mode: 'HTML', reply_markup: keyboard.reply_markup }
    );
  } catch (e) {
    console.error(`–û—à–∏–±–∫–∞ /start: ${e.message}`);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /menu
bot.command('menu', (ctx) => {
  try {
    ctx.reply(
      `<b>–í–∞–ª–µ—Ä–∏—è –î–∂–∞–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å?</b> üòä\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ! üëá`,
      { parse_mode: 'HTML', reply_markup: keyboard.reply_markup }
    );
  } catch (e) {
    console.error(`–û—à–∏–±–∫–∞ /menu: ${e.message}`);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', (ctx) => {
  try {
    const text = ctx.message.text;

    switch (text) {
      case 'ü™ñ –°–∫–æ–ª—å–∫–æ –∂–¥–∞—Ç—å –†–æ–º—É?':
        ctx.reply(
          getService(),
          { parse_mode: 'HTML', reply_markup: keyboard.reply_markup }
        );
        console.log('–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–ª—É–∂–±—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
        break;
      case 'üéÅ –°—é—Ä–ø—Ä–∏–∑ –æ—Ç –†–æ–º–∞':
        let surprise;
        do {
          surprise = surprises[Math.floor(Math.random() * surprises.length)];
        } while (state.surpriseHistory.includes(surprise) && state.surpriseHistory.length < surprises.length);
        state.surpriseHistory.push(surprise);
        if (state.surpriseHistory.length >= surprises.length) state.surpriseHistory.shift();
        const emoji = randomEmojis[Math.floor(Math.random() * randomEmojis.length)];
        ctx.reply(
          `<b>–í–∞–ª–µ—Ä–∏—è –î–∂–∞–Ω, –≤–æ—Ç —Å—é—Ä–ø—Ä–∏–∑ –æ—Ç –†–æ–º–∞!</b> üéÅ\n${surprise} ${emoji}`,
          { parse_mode: 'HTML', reply_markup: keyboard.reply_markup }
        );
        console.log('–°—é—Ä–ø—Ä–∏–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
        break;
      case 'üá¶üá≤ ’Ä’°’µ’•÷Ä’•’∂':
        const armenianCompliment = compliments[Math.floor(Math.random() * 5) + 10]; // –ò–Ω–¥–µ–∫—Å—ã 10-14
        ctx.reply(
          `<b>’é’°’¨’•÷Ä’´’° ’ã’°’∂, ’Ω’´÷Ä’∏’æ ’∞’°’µ’•÷Ä’•’∂÷â</b> üíû\n${armenianCompliment}`,
          { parse_mode: 'HTML', reply_markup: keyboard.reply_markup }
        );
        console.log('–ê—Ä–º—è–Ω—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
        break;
      default:
        ctx.reply(
          `<b>–í–∞–ª–µ—Ä–∏—è –î–∂–∞–Ω, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É!</b> üòÖ\n–£–∑–Ω–∞–π, —Å–∫–æ–ª—å–∫–æ –∂–¥–∞—Ç—å –†–æ–º—É. ‚ù§Ô∏è`,
          { parse_mode: 'HTML', reply_markup: keyboard.reply_markup }
        );
        console.log('–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
        break;
    }
  } catch (e) {
    console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${e.message}`);
    ctx.reply(
      '<b>–û–π, –í–∞–ª–µ—Ä–∏—è –î–∂–∞–Ω, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!</b> üòî\n–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞. ‚ù§Ô∏è',
      { parse_mode: 'HTML', reply_markup: keyboard.reply_markup }
    );
  }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
console.log('–ë–æ—Ç @RomaARMY –¥–ª—è –í–∞–ª–µ—Ä–∏–∏ –∑–∞–ø—É—â–µ–Ω...');
bot.launch({
  dropPendingUpdates: true // –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
}).then(() => {
  console.log('–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–ø—É—â–µ–Ω–∞...');
}).catch((e) => {
  console.error(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${e.message}`);
  if (e.response && e.response.error_code === 401) {
    console.error('–û—à–∏–±–∫–∞ 401: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ @BotFather. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.');
  }
  process.exit(1);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
['SIGINT', 'SIGTERM'].forEach((signal) => {
  process.on(signal, () => {
    console.log('–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
    try {
      bot.stop(signal); // –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤, –±–µ–∑ .catch()
      console.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    } catch (err) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: ${err.message}`);
    }
    process.exit(0);
  });
});
